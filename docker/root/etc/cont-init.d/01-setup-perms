#!/usr/bin/with-contenv bash

# Set the group ID and user ID for the user "abc"
groupmod -o -g "${PGID}" abc
usermod -o -u "${PUID}" abc

# Display the user ID and group ID for the user "abc"
echo "
User uid:    $(id -u abc)
User gid:    $(id -g abc)
-------------------------------------
"

# Change the ownership of the specified directories to the user "abc"
chown -R ${PUID}:${PGID} \
    "${HOME}" \
    /temp \
    /logs

# Path to the files storing PUID and PGID
PUID_PATH="/app/server/puid"
PGID_PATH="/app/server/pgid"

SERVER_DATA="/app/server"

# Check CHOWN_ON_STARTUP , setting false will most likely break the container
# if [ "$CHOWN_ON_STARTUP" = "false" ]; then
#     echo "CHOWN_ON_STARTUP is set to false. Skipping chown operation."
#     exit 0
# fi

# Add recursive directory creation 
if [ ! -d "${SERVER_DATA}" ]; then
  echo "Creating ${SERVER_DATA} directory"
  mkdir -p "${SERVER_DATA}"
fi

# Check if files exist and match current PUID and PGID
if [[ ! -f $PUID_PATH || $(cat $PUID_PATH) != $PUID ]] || \
   [[ ! -f $PGID_PATH || $(cat $PGID_PATH) != $PGID ]]; then
    echo "Adjusting permissions for ${SERVER_DATA}..."
    echo "This first-time chown operation may take a long time depending on the number of files."
    echo "You won't need to run this operation again unless PUID or PGID is changed."
    chown -R ${PUID}:${PGID} ${SERVER_DATA}

    # Write the current PUID and PGID to respective files
    echo $PUID > $PUID_PATH
    echo $PGID > $PGID_PATH

    echo "Finished chowning ${SERVER_DATA}."
else
    echo "Permissions for ${SERVER_DATA} are already set correctly."
fi

# Ownership of unmapped folders will reset on container restart
# Large folders such as SERVER_DATA and modules are excluded from this operation
echo "Chowning other assets..."
find /app \
    -path ${SERVER_DATA} -prune -o \
    -path /app/Tdarr_Server/node_modules -prune -o \
    -path /app/Tdarr_Node/node_modules -prune -o \
    -exec chown ${PUID}:${PGID} {} +

echo "Finished all chowning.."